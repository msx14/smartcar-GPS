<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\RT102X.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\RT102X.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Sun Aug 23 23:43:20 2020
<BR><P>
<H3>Maximum Stack Usage =       1032 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Menu &rArr; Main_Show &rArr; Insert_Float &rArr; Dis_Float &rArr; Dis_String &rArr; OLED_Write_String_7 &rArr; LCD_DispChar &rArr; lcd_showchar &rArr; lcd_set_region &rArr; lcd_writeIndex &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">NMI_Handler</a><BR>
 <LI><a href="#[b]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">HardFault_Handler</a><BR>
 <LI><a href="#[c]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">MemManage_Handler</a><BR>
 <LI><a href="#[d]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">BusFault_Handler</a><BR>
 <LI><a href="#[e]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">UsageFault_Handler</a><BR>
 <LI><a href="#[f]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">SVC_Handler</a><BR>
 <LI><a href="#[10]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">DebugMon_Handler</a><BR>
 <LI><a href="#[11]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">PendSV_Handler</a><BR>
 <LI><a href="#[173]">DbgConsole_SendData</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[108]">__aeabi_assert</a><BR>
 <LI><a href="#[1f6]">SerialManager_Write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[108]">__aeabi_assert</a><BR>
 <LI><a href="#[1f5]">Serial_UartWrite</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[108]">__aeabi_assert</a><BR>
 <LI><a href="#[19c]">HAL_UartSendBlocking</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[108]">__aeabi_assert</a><BR>
 <LI><a href="#[19d]">LPUART_WriteBlocking</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[108]">__aeabi_assert</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[8e]">ACMP1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[8f]">ACMP2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[90]">ACMP3_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[91]">ACMP4_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[56]">ADC1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[57]">ADC2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[8c]">ADC_ETC_ERROR_IRQ_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[89]">ADC_ETC_IRQ0_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[8a]">ADC_ETC_IRQ1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[8b]">ADC_ETC_IRQ2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[4a]">BEE_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[d]">BusFault_Handler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[c5]">CAN1_DriverIRQHandler</a> from fsl_flexcan.o(i.CAN1_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[37]">CAN1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[c6]">CAN2_DriverIRQHandler</a> from fsl_flexcan.o(i.CAN2_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[38]">CAN2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[72]">CCM_1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[73]">CCM_2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[26]">CORE_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[44]">CSU_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[24]">CTI0_ERROR_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[25]">CTI1_ERROR_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[58]">DCDC_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[45]">DCP_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[46]">DCP_VMI_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[a4]">DMA0_DMA16_DriverIRQHandler</a> from fsl_edma.o(i.DMA0_DMA16_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[13]">DMA0_DMA16_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[ae]">DMA10_DMA26_DriverIRQHandler</a> from fsl_edma.o(i.DMA10_DMA26_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[1d]">DMA10_DMA26_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[af]">DMA11_DMA27_DriverIRQHandler</a> from fsl_edma.o(i.DMA11_DMA27_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[1e]">DMA11_DMA27_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[b0]">DMA12_DMA28_DriverIRQHandler</a> from fsl_edma.o(i.DMA12_DMA28_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[1f]">DMA12_DMA28_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[b1]">DMA13_DMA29_DriverIRQHandler</a> from fsl_edma.o(i.DMA13_DMA29_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[20]">DMA13_DMA29_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[b2]">DMA14_DMA30_DriverIRQHandler</a> from fsl_edma.o(i.DMA14_DMA30_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[21]">DMA14_DMA30_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[b3]">DMA15_DMA31_DriverIRQHandler</a> from fsl_edma.o(i.DMA15_DMA31_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[22]">DMA15_DMA31_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[a5]">DMA1_DMA17_DriverIRQHandler</a> from fsl_edma.o(i.DMA1_DMA17_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[14]">DMA1_DMA17_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[a6]">DMA2_DMA18_DriverIRQHandler</a> from fsl_edma.o(i.DMA2_DMA18_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[15]">DMA2_DMA18_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[a7]">DMA3_DMA19_DriverIRQHandler</a> from fsl_edma.o(i.DMA3_DMA19_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[16]">DMA3_DMA19_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[a8]">DMA4_DMA20_DriverIRQHandler</a> from fsl_edma.o(i.DMA4_DMA20_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[17]">DMA4_DMA20_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[a9]">DMA5_DMA21_DriverIRQHandler</a> from fsl_edma.o(i.DMA5_DMA21_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[18]">DMA5_DMA21_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[aa]">DMA6_DMA22_DriverIRQHandler</a> from fsl_edma.o(i.DMA6_DMA22_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[19]">DMA6_DMA22_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[ab]">DMA7_DMA23_DriverIRQHandler</a> from fsl_edma.o(i.DMA7_DMA23_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[1a]">DMA7_DMA23_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[ac]">DMA8_DMA24_DriverIRQHandler</a> from fsl_edma.o(i.DMA8_DMA24_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[1b]">DMA8_DMA24_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[ad]">DMA9_DMA25_DriverIRQHandler</a> from fsl_edma.o(i.DMA9_DMA25_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[1c]">DMA9_DMA25_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[b4]">DMA_ERROR_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[23]">DMA_ERROR_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[d2]">DbgConsole_PrintCallback</a> from fsl_debug_console.o(i.DbgConsole_PrintCallback) referenced from fsl_debug_console.o(i.DbgConsole_Printf)
 <LI><a href="#[10]">DebugMon_Handler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[a1]">DefaultISR</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[a1]">DefaultISR</a> from startup_mimxrt1021.o(.text) referenced 97 times from startup_mimxrt1021.o(RESET)
 <LI><a href="#[94]">ENC1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[95]">ENC2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[d1]">ENET_1588_Timer_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[86]">ENET_1588_Timer_IRQHandler</a> from fsl_enet.o(i.ENET_1588_Timer_IRQHandler) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[d0]">ENET_DriverIRQHandler</a> from fsl_enet.o(i.ENET_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[85]">ENET_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[71]">EWM_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[cc]">FLEXIO1_DriverIRQHandler</a> from fsl_flexio.o(i.FLEXIO1_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[6d]">FLEXIO1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[39]">FLEXRAM_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[cd]">FLEXSPI_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[7f]">FLEXSPI_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[74]">GPC_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[63]">GPIO1_Combined_0_15_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[64]">GPIO1_Combined_16_31_IRQHandler</a> from isr.o(i.GPIO1_Combined_16_31_IRQHandler) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[5b]">GPIO1_INT0_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[5c]">GPIO1_INT1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[5d]">GPIO1_INT2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[5e]">GPIO1_INT3_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[5f]">GPIO1_INT4_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[60]">GPIO1_INT5_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[61]">GPIO1_INT6_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[62]">GPIO1_INT7_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[65]">GPIO2_Combined_0_15_IRQHandler</a> from isr.o(i.GPIO2_Combined_0_15_IRQHandler) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[66]">GPIO2_Combined_16_31_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[67]">GPIO3_Combined_0_15_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[68]">GPIO3_Combined_16_31_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[6b]">GPIO5_Combined_0_15_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[6c]">GPIO5_Combined_16_31_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[3c]">GPR_IRQ_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[77]">GPT1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[78]">GPT2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[b]">HardFault_Handler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[d4]">InLoop</a> from aia_cmsisnn_ext.o(.emb_text) referenced from aia_cmsisnn_ext.o(i.aia_convolve_1x1_HWC_q15_fast_nonsquare)
 <LI><a href="#[d5]">InLoopAligned</a> from aia_cmsisnn_ext.o(.emb_text) referenced from aia_cmsisnn_ext.o(i.aia_convolve_1x1_HWC_q15_fast_nonsquare)
 <LI><a href="#[3a]">KPP_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[bd]">LPI2C1_DriverIRQHandler</a> from fsl_lpi2c.o(i.LPI2C1_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[2f]">LPI2C1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[be]">LPI2C2_DriverIRQHandler</a> from fsl_lpi2c.o(i.LPI2C2_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[30]">LPI2C2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[bf]">LPI2C3_DriverIRQHandler</a> from fsl_lpi2c.o(i.LPI2C3_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[31]">LPI2C3_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[c0]">LPI2C4_DriverIRQHandler</a> from fsl_lpi2c.o(i.LPI2C4_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[32]">LPI2C4_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[c1]">LPSPI1_DriverIRQHandler</a> from fsl_lpspi.o(i.LPSPI1_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[33]">LPSPI1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[c2]">LPSPI2_DriverIRQHandler</a> from fsl_lpspi.o(i.LPSPI2_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[34]">LPSPI2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[c3]">LPSPI3_DriverIRQHandler</a> from fsl_lpspi.o(i.LPSPI3_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[35]">LPSPI3_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[c4]">LPSPI4_DriverIRQHandler</a> from fsl_lpspi.o(i.LPSPI4_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[36]">LPSPI4_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[b5]">LPUART1_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART1_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[27]">LPUART1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[b6]">LPUART2_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART2_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[28]">LPUART2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[b7]">LPUART3_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART3_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[29]">LPUART3_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[b8]">LPUART4_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART4_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[2a]">LPUART4_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[b9]">LPUART5_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART5_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[2b]">LPUART5_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[ba]">LPUART6_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART6_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[2c]">LPUART6_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[bb]">LPUART7_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART7_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[2d]">LPUART7_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[bc]">LPUART8_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART8_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[2e]">LPUART8_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[d3]">LPUART_TransferHandleIRQ</a> from fsl_lpuart.o(i.LPUART_TransferHandleIRQ) referenced from fsl_lpuart.o(i.LPUART_TransferCreateHandle)
 <LI><a href="#[c]">MemManage_Handler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[a]">NMI_Handler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[8d]">PIT_IRQHandler</a> from isr.o(i.PIT_IRQHandler) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[50]">PMU_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[79]">PWM1_0_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[7a]">PWM1_1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[7b]">PWM1_2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[7c]">PWM1_3_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[7d]">PWM1_FAULT_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[9c]">PWM2_0_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[9d]">PWM2_1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[9e]">PWM2_2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[9f]">PWM2_3_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[a0]">PWM2_FAULT_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[70]">RTWDOG_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[69]">Reserved102_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[6a]">Reserved103_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[6e]">Reserved107_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[76]">Reserved115_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[7e]">Reserved123_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[83]">Reserved128_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[92]">Reserved143_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[93]">Reserved144_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[96]">Reserved147_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[97]">Reserved148_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[9a]">Reserved151_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[9b]">Reserved152_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[3b]">Reserved56_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[3d]">Reserved58_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[3e]">Reserved59_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[3f]">Reserved60_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[47]">Reserved68_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[49]">Reserved70_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[51]">Reserved78_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[55]">Reserved82_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[59]">Reserved86_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[5a]">Reserved87_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[9]">Reset_Handler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[c7]">SAI1_DriverIRQHandler</a> from fsl_sai.o(i.SAI1_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[4b]">SAI1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[c8]">SAI2_DriverIRQHandler</a> from fsl_sai.o(i.SAI2_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[4c]">SAI2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[c9]">SAI3_RX_DriverIRQHandler</a> from fsl_sai.o(i.SAI3_RX_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[4d]">SAI3_RX_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[ca]">SAI3_TX_DriverIRQHandler</a> from fsl_sai.o(i.SAI3_TX_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[4e]">SAI3_TX_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[80]">SEMC_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[41]">SNVS_HP_WRAPPER_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[42]">SNVS_HP_WRAPPER_TZ_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[43]">SNVS_LP_WRAPPER_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[cb]">SPDIF_DriverIRQHandler</a> from fsl_spdif.o(i.SPDIF_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[4f]">SPDIF_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[75]">SRC_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[f]">SVC_Handler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[12]">SysTick_Handler</a> from main.o(.emb_text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[a2]">SystemInit</a> from system_mimxrt1021.o(i.SystemInit) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[52]">TEMP_LOW_HIGH_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[53]">TEMP_PANIC_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[98]">TMR1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[99]">TMR2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[48]">TRNG_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[84]">USB_OTG1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[54]">USB_PHY_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[ce]">USDHC1_DriverIRQHandler</a> from fsl_usdhc.o(i.USDHC1_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[81]">USDHC1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[cf]">USDHC2_DriverIRQHandler</a> from fsl_usdhc.o(i.USDHC2_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[82]">USDHC2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[e]">UsageFault_Handler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[6f]">WDOG1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[40]">WDOG2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[87]">XBAR1_IRQ_0_1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[88]">XBAR1_IRQ_2_3_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[d7]">__main</a> from __main.o(!!!main) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[d6]">wireless_uart_callback</a> from seekfree_wireless.o(i.wireless_uart_callback) referenced from seekfree_wireless.o(i.seekfree_wireless_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[117]"></a>CLOCK_DeinitAudioPll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_DeinitAudioPll))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN (via Veneer)
</UL>

<P><STRONG><a name="[25a]"></a>CLOCK_GetAhbFreq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetAhbFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetIpgFreq
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[22d]"></a>CLOCK_GetFreq</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPerClkFreq
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetIpgFreq
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbFreq
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms (via Veneer)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init (via Veneer)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init (via Veneer)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_delay (via Veneer)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init (via Veneer)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[25d]"></a>CLOCK_GetIpgFreq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetIpgFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPerClkFreq
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[25e]"></a>CLOCK_GetPerClkFreq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetPerClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetIpgFreq
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[120]"></a>CLOCK_GetPllFreq</STRONG> (Thumb, 482 bytes, Stack size 48 bytes, fsl_clock.o(i.CLOCK_GetPllFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq (via Veneer)
</UL>

<P><STRONG><a name="[25c]"></a>CLOCK_GetSemcFreq</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetSemcFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = CLOCK_GetSemcFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[261]"></a>CLOCK_GetSysPfdFreq</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_GetSysPfdFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>

<P><STRONG><a name="[260]"></a>CLOCK_GetUsb1PfdFreq</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_GetUsb1PfdFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>

<P><STRONG><a name="[118]"></a>CLOCK_InitEnetPll</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_InitEnetPll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_InitEnetPll
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN (via Veneer)
</UL>

<P><STRONG><a name="[111]"></a>CLOCK_InitExternalClk</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_InitExternalClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = CLOCK_InitExternalClk &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN (via Veneer)
</UL>

<P><STRONG><a name="[112]"></a>CLOCK_InitRcOsc24M</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_InitRcOsc24M))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN (via Veneer)
</UL>

<P><STRONG><a name="[113]"></a>CLOCK_SwitchOsc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_SwitchOsc))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN (via Veneer)
</UL>

<P><STRONG><a name="[d7]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d8]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[da]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[262]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[263]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[264]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[265]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[db]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[266]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[e1]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[dc]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[de]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit5.o(.ARM.Collect$$libinit$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[267]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[268]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[269]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[26a]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[26b]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[26c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[26d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[26e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[26f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[270]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[271]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[272]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[273]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[274]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[275]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[276]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[277]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[278]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[279]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[27a]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[e6]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[27b]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[27c]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[27d]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[27e]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[27f]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[280]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[281]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[d9]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[282]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[283]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[e0]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[284]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[e2]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Menu &rArr; Main_Show &rArr; Insert_Float &rArr; Dis_Float &rArr; Dis_String &rArr; OLED_Write_String_7 &rArr; LCD_DispChar &rArr; lcd_showchar &rArr; lcd_set_region &rArr; lcd_writeIndex &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[285]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[103]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[e5]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[286]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[e7]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SysTick_Handler &rArr; SysTick_C_Handler &rArr; Profiling &rArr; _ProfOnHit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_C_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>InLoopAligned</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, aia_cmsisnn_ext.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> aia_cmsisnn_ext.o(i.aia_convolve_1x1_HWC_q15_fast_nonsquare)
</UL>
<P><STRONG><a name="[d4]"></a>InLoop</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, aia_cmsisnn_ext.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> aia_cmsisnn_ext.o(i.aia_convolve_1x1_HWC_q15_fast_nonsquare)
</UL>
<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[287]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA0_DMA16_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA1_DMA17_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA2_DMA18_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA3_DMA19_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA4_DMA20_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA5_DMA21_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA6_DMA22_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA7_DMA23_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA8_DMA24_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA9_DMA25_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA10_DMA26_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA11_DMA27_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA12_DMA28_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA13_DMA29_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA14_DMA30_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA15_DMA31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>LPUART2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>LPUART3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>LPUART4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>LPUART5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>LPUART6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>LPUART7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>LPUART8_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>LPI2C1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>LPI2C2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>LPI2C3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>LPI2C4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>LPSPI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>LPSPI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>LPSPI3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>LPSPI4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CAN1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>CAN2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SAI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SAI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SAI3_RX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SAI3_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SPDIF_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>FLEXIO1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>FLEXSPI_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>USDHC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>USDHC2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>ENET_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>ACMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>ACMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>ACMP3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>ACMP4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>ADC_ETC_ERROR_IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>ADC_ETC_IRQ0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>ADC_ETC_IRQ1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>ADC_ETC_IRQ2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>BEE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>CCM_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>CCM_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CORE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CSU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CTI0_ERROR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CTI1_ERROR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DCP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DCP_VMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>DMA_ERROR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[a1]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1021.o(RESET)
<LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>ENC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>ENC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>ENET_1588_Timer_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>EWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>FLEXRAM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>FLEXSPI_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>GPC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>GPIO1_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>GPIO1_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>GPIO1_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>GPIO1_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>GPIO1_INT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>GPIO1_INT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>GPIO1_INT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>GPIO1_INT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>GPIO1_INT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>GPIO2_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>GPIO3_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>GPIO3_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>GPIO5_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>GPIO5_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>GPR_IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>GPT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>GPT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>KPP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>PMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>PWM1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>PWM1_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>PWM1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>PWM1_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>PWM1_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>PWM2_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>PWM2_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>PWM2_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>PWM2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>PWM2_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>RTWDOG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>Reserved102_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>Reserved103_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>Reserved107_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>Reserved115_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>Reserved123_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>Reserved128_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>Reserved143_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>Reserved144_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>Reserved147_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>Reserved148_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>Reserved151_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>Reserved152_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>Reserved56_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>Reserved58_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>Reserved59_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>Reserved60_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>Reserved68_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>Reserved70_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>Reserved78_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>Reserved82_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>Reserved86_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>Reserved87_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>SEMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SNVS_HP_WRAPPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SNVS_HP_WRAPPER_TZ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SNVS_LP_WRAPPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>SRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TEMP_LOW_HIGH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TEMP_PANIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>USB_OTG1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USB_PHY_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>WDOG1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>WDOG2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>XBAR1_IRQ_0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>XBAR1_IRQ_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIPort_Malloc
</UL>

<P><STRONG><a name="[ed]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIPort_Free
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_UpdatePwmDutycycle
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetupPwm
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterSetDelayTimes
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRadixNumToString
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_delay
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProfOnHit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[288]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_softmax_q15
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRadixNumToString
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aia_softmax_multi_q15
</UL>

<P><STRONG><a name="[ee]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[200]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_depthwise_separable_conv_HWC_q7_nonsquare
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_depthwise_separable_conv_HWC_q7
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q15_fast_nonsquare
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q15_fast
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q15_basic
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aia_depthwise_separable_conv_HWC_q15
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aia_concat
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzResetContext
</UL>

<P><STRONG><a name="[f0]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[289]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_maxpool_q7_HWC
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aia_maxpool_q15_HWC
</UL>

<P><STRONG><a name="[f2]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
</UL>

<P><STRONG><a name="[28a]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
</UL>

<P><STRONG><a name="[28b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[215]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_depthwise_separable_conv_HWC_q7_nonsquare
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_depthwise_separable_conv_HWC_q7
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q15_fast_nonsquare
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q15_fast
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q15_basic
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_fast_nonsquare
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_fast
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_basic_nonsquare
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_basic
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aia_depthwise_separable_conv_HWC_q15
</UL>

<P><STRONG><a name="[f7]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[f6]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[12c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferCreateHandle
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterGetDefaultConfig
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_RunModelXIP
</UL>

<P><STRONG><a name="[28e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[12f]"></a>strcmp</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, strcmpv7m_pel.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzResetContext
</UL>

<P><STRONG><a name="[eb]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[290]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[291]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[fa]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[df]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[fc]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[3]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[ff]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[292]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[293]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[f4]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[294]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[295]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[296]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[fb]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[297]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[298]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[299]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[102]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[101]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[e8]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[104]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[105]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[106]"></a>ADC_DoAutoCalibration</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, fsl_adc.o(i.ADC_DoAutoCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = ADC_DoAutoCalibration &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableHardwareTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[109]"></a>ADC_GetDefaultConfig</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, fsl_adc.o(i.ADC_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = ADC_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[10b]"></a>ADC_Init</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, fsl_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = ADC_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[10d]"></a>ADC_SetChannelConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fsl_adc.o(i.ADC_SetChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = ADC_SetChannelConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_convert
</UL>

<P><STRONG><a name="[10e]"></a>AD_Init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, init.o(i.AD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = AD_Init &rArr; adc_init &rArr; adc_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[110]"></a>BOARD_BootClockRUN</STRONG> (Thumb, 1208 bytes, Stack size 8 bytes, clock_config.o(i.BOARD_BootClockRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = BOARD_BootClockRUN &rArr; CLOCK_DisableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SwitchOsc (via Veneer)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitRcOsc24M (via Veneer)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitExternalClk (via Veneer)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitEnetPll (via Veneer)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitAudioPll (via Veneer)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetSaiMClkClockSource
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[11b]"></a>BOARD_ConfigMPU</STRONG> (Thumb, 386 bytes, Stack size 8 bytes, board.o(i.BOARD_ConfigMPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BOARD_ConfigMPU &rArr; SCB_EnableDCache
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableICache
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableDCache
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_DisableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[11f]"></a>BOARD_DebugConsoleSrcFreq</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, board.o(i.BOARD_DebugConsoleSrcFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = BOARD_DebugConsoleSrcFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq (via Veneer)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[122]"></a>BOARD_InitBootPins</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pin_mux.o(i.BOARD_InitBootPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = BOARD_InitBootPins &rArr; BOARD_InitPins &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[124]"></a>BOARD_InitDebugConsole</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, board.o(i.BOARD_InitDebugConsole))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = BOARD_InitDebugConsole &rArr; DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[123]"></a>BOARD_InitPins</STRONG> (Thumb, 470 bytes, Stack size 16 bytes, pin_mux.o(i.BOARD_InitPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = BOARD_InitPins &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinMux
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinConfig
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootPins
</UL>

<P><STRONG><a name="[c5]"></a>CAN1_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcan.o(i.CAN1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = CAN1_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[c6]"></a>CAN2_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcan.o(i.CAN2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = CAN2_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[129]"></a>CIPort_Free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nncie_port_nxpsdk.o(i.CIPort_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CIPort_Free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_RunModelXIP
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CI_FreeAll
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzResetContext
</UL>

<P><STRONG><a name="[12a]"></a>CIPort_Malloc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nncie_port_nxpsdk.o(i.CIPort_Malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CIPort_Malloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzResetContext
</UL>

<P><STRONG><a name="[251]"></a>CI_GetModelInfoXIP</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nncie.o(i.CI_GetModelInfoXIP))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_change
</UL>

<P><STRONG><a name="[250]"></a>CI_GetOutMetricInfo</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nncie.o(i.CI_GetOutMetricInfo))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_change
</UL>

<P><STRONG><a name="[12b]"></a>CI_RunModelXIP</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, nncie.o(i.CI_RunModelXIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = CI_RunModelXIP &rArr; CI_zzStep &rArr; arm_convolve_HWC_q7_RGB &rArr; arm_nn_mat_mult_kernel_q7_q15
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIPort_Free
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzResetContext
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_change
</UL>

<P><STRONG><a name="[12d]"></a>CI_zzResetContext</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, nncie.o(i.CI_zzResetContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CI_zzResetContext &rArr; CIPort_Malloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIPort_Malloc
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIPort_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_RunModelXIP
</UL>

<P><STRONG><a name="[12e]"></a>CI_zzStep</STRONG> (Thumb, 6036 bytes, Stack size 120 bytes, nncie.o(i.CI_zzStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = CI_zzStep &rArr; arm_convolve_HWC_q7_RGB &rArr; arm_nn_mat_mult_kernel_q7_q15
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_softmax_q15
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_softmax_q7
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_relu_q15
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_relu_q7
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_maxpool_q7_HWC
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_avepool_q7_HWC
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_activations_direct_q7
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fully_connected_q15
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fully_connected_q7
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_depthwise_separable_conv_HWC_q7_nonsquare
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_depthwise_separable_conv_HWC_q7
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q15_fast_nonsquare
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q15_fast
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q15_basic
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_RGB
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_fast_nonsquare
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_fast
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_basic_nonsquare
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_basic
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_1x1_HWC_q7_fast_nonsquare
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_avepool_q7_HWC_nonsquare
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aia_softmax_multi_q7
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aia_softmax_multi_q15
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aia_relu8_q7
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aia_relu8_q15
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aia_relu6_q7
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aia_relu6_q15
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aia_relu4_q7
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aia_relu4_q15
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aia_nn_activations_direct_q15
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aia_maxpool_q15_HWC
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aia_depthwise_separable_conv_HWC_q15_nonsquare
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aia_depthwise_separable_conv_HWC_q15
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aia_convolve_HWC_q15_RGB
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aia_convolve_1x1_HWC_q15_fast_nonsquare
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aia_concat
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aia_avepool_q15_HWC
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aia_HWC_q7_add2
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aia_HWC_q15_add2
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIPort_Malloc
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIPort_Free
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CI_FreeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_RunModelXIP
</UL>

<P><STRONG><a name="[1fc]"></a>CleanTmp</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, spd.o(i.CleanTmp))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedControl
</UL>

<P><STRONG><a name="[a4]"></a>DMA0_DMA16_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA0_DMA16_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA0_DMA16_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>DMA10_DMA26_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA10_DMA26_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA10_DMA26_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[af]"></a>DMA11_DMA27_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA11_DMA27_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA11_DMA27_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>DMA12_DMA28_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA12_DMA28_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA12_DMA28_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>DMA13_DMA29_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA13_DMA29_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA13_DMA29_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>DMA14_DMA30_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA14_DMA30_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA14_DMA30_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>DMA15_DMA31_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA15_DMA31_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA15_DMA31_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[a5]"></a>DMA1_DMA17_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA1_DMA17_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA1_DMA17_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[a6]"></a>DMA2_DMA18_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA2_DMA18_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA2_DMA18_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>DMA3_DMA19_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA3_DMA19_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA3_DMA19_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>DMA4_DMA20_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA4_DMA20_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA4_DMA20_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[a9]"></a>DMA5_DMA21_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA5_DMA21_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA5_DMA21_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[aa]"></a>DMA6_DMA22_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA6_DMA22_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA6_DMA22_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[ab]"></a>DMA7_DMA23_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA7_DMA23_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA7_DMA23_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[ac]"></a>DMA8_DMA24_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA8_DMA24_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA8_DMA24_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>DMA9_DMA25_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA9_DMA25_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DMA9_DMA25_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[125]"></a>DbgConsole_Init</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, fsl_debug_console.o(i.DbgConsole_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[174]"></a>DbgConsole_Printf</STRONG> (Thumb, 60 bytes, Stack size 160 bytes, fsl_debug_console.o(i.DbgConsole_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendData
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[173]"></a>DbgConsole_SendData</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_debug_console.o(i.DbgConsole_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + In Cycle
<LI>Call Chain = DbgConsole_SendData &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_WriteBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintCallback
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[177]"></a>Dis_Cursor</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, menu.o(i.Dis_Cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = Dis_Cursor &rArr; lcd_set_region &rArr; lcd_writeIndex &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_writedata_16bit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_region
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extra_Show
</UL>

<P><STRONG><a name="[17a]"></a>Dis_Float</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, screen.o(i.Dis_Float))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = Dis_Float &rArr; Dis_String &rArr; OLED_Write_String_7 &rArr; LCD_DispChar &rArr; lcd_showchar &rArr; lcd_set_region &rArr; lcd_writeIndex &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_String
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Float_To_String
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Insert_Float
</UL>

<P><STRONG><a name="[17d]"></a>Dis_Head</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, screen.o(i.Dis_Head))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = Dis_Head &rArr; LCD_DispChar &rArr; lcd_showchar &rArr; lcd_set_region &rArr; lcd_writeIndex &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Insert_Page
</UL>

<P><STRONG><a name="[17f]"></a>Dis_Int</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, screen.o(i.Dis_Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = Dis_Int &rArr; Dis_String &rArr; OLED_Write_String_7 &rArr; LCD_DispChar &rArr; lcd_showchar &rArr; lcd_set_region &rArr; lcd_writeIndex &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_String
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_To_String
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Insert_Int
</UL>

<P><STRONG><a name="[17c]"></a>Dis_String</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, screen.o(i.Dis_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = Dis_String &rArr; OLED_Write_String_7 &rArr; LCD_DispChar &rArr; lcd_showchar &rArr; lcd_set_region &rArr; lcd_writeIndex &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_String_7
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Insert_Int
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Insert_Float
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_Int
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_Float
</UL>

<P><STRONG><a name="[182]"></a>DriveInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, init.o(i.DriveInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = DriveInit &rArr; pwm_init &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[16e]"></a>EDMA_GetChannelStatusFlags</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fsl_edma.o(i.EDMA_GetChannelStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = EDMA_GetChannelStatusFlags &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA9_DMA25_DriverIRQHandler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA8_DMA24_DriverIRQHandler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA7_DMA23_DriverIRQHandler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA6_DMA22_DriverIRQHandler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA5_DMA21_DriverIRQHandler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA4_DMA20_DriverIRQHandler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA3_DMA19_DriverIRQHandler
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_DMA18_DriverIRQHandler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_DMA17_DriverIRQHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA15_DMA31_DriverIRQHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA14_DMA30_DriverIRQHandler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA13_DMA29_DriverIRQHandler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA12_DMA28_DriverIRQHandler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA11_DMA27_DriverIRQHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA10_DMA26_DriverIRQHandler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_DMA16_DriverIRQHandler
</UL>

<P><STRONG><a name="[16f]"></a>EDMA_HandleIRQ</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, fsl_edma.o(i.EDMA_HandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA9_DMA25_DriverIRQHandler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA8_DMA24_DriverIRQHandler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA7_DMA23_DriverIRQHandler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA6_DMA22_DriverIRQHandler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA5_DMA21_DriverIRQHandler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA4_DMA20_DriverIRQHandler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA3_DMA19_DriverIRQHandler
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_DMA18_DriverIRQHandler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_DMA17_DriverIRQHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA15_DMA31_DriverIRQHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA14_DMA30_DriverIRQHandler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA13_DMA29_DriverIRQHandler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA12_DMA28_DriverIRQHandler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA11_DMA27_DriverIRQHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA10_DMA26_DriverIRQHandler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_DMA16_DriverIRQHandler
</UL>

<P><STRONG><a name="[86]"></a>ENET_1588_Timer_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_enet.o(i.ENET_1588_Timer_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ENET_1588_Timer_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[184]"></a>ENET_CommonFrame0IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, fsl_enet.o(i.ENET_CommonFrame0IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = ENET_CommonFrame0IRQHandler &rArr; ENET_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_DriverIRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>ENET_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_enet.o(i.ENET_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = ENET_DriverIRQHandler &rArr; ENET_CommonFrame0IRQHandler &rArr; ENET_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_CommonFrame0IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[185]"></a>ENET_GetInstance</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_enet.o(i.ENET_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = ENET_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_CommonFrame0IRQHandler
</UL>

<P><STRONG><a name="[1f8]"></a>ExpectSpeedGet</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, spd.o(i.ExpectSpeedGet))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedControl
</UL>

<P><STRONG><a name="[186]"></a>Extra_Show</STRONG> (Thumb, 744 bytes, Stack size 8 bytes, menu.o(i.Extra_Show))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = Extra_Show &rArr; OLED_Write_Int &rArr; LCD_DispString &rArr; lcd_showchar &rArr; lcd_set_region &rArr; lcd_writeIndex &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_showchar
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispChar
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_Cursor
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Int
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu
</UL>

<P><STRONG><a name="[cc]"></a>FLEXIO1_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_flexio.o(i.FLEXIO1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXIO1_DriverIRQHandler &rArr; FLEXIO_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[189]"></a>FLEXIO_CommonIRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fsl_flexio.o(i.FLEXIO_CommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLEXIO_CommonIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO1_DriverIRQHandler
</UL>

<P><STRONG><a name="[17b]"></a>Float_To_String</STRONG> (Thumb, 338 bytes, Stack size 28 bytes, oled.o(i.Float_To_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Float_To_String
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_Float
</UL>

<P><STRONG><a name="[64]"></a>GPIO1_Combined_16_31_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, isr.o(i.GPIO1_Combined_16_31_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO1_Combined_16_31_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v032_vsync
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scc8660_vsync
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinsInterruptFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>GPIO2_Combined_0_15_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, isr.o(i.GPIO2_Combined_0_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO2_Combined_0_15_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinsInterruptFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[18e]"></a>GPIO_PinInit</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, fsl_gpio.o(i.GPIO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = GPIO_PinInit &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSetInterruptConfig
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetInstance
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[190]"></a>GPIO_PinSetInterruptConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, fsl_gpio.o(i.GPIO_PinSetInterruptConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinSetInterruptConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[18f]"></a>GPIO_PinWrite</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_gpio.o(i.GPIO_PinWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = GPIO_PinWrite &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[191]"></a>GPT_Deinit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fsl_gpt.o(i.GPT_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = GPT_Deinit &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_GetInstance
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_init
</UL>

<P><STRONG><a name="[193]"></a>GPT_GetDefaultConfig</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fsl_gpt.o(i.GPT_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = GPT_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_init
</UL>

<P><STRONG><a name="[194]"></a>GPT_Init</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, fsl_gpt.o(i.GPT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = GPT_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_GetInstance
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_init
</UL>

<P><STRONG><a name="[196]"></a>GiveDriveDuty</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, spd.o(i.GiveDriveDuty))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = GiveDriveDuty &rArr; pwm_duty &rArr; PWM_UpdatePwmDutycycle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_duty
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedControl
</UL>

<P><STRONG><a name="[198]"></a>HAL_UartInit</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, lpuart_adapter.o(i.HAL_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = HAL_UartInit &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartInit
</UL>

<P><STRONG><a name="[19c]"></a>HAL_UartSendBlocking</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lpuart_adapter.o(i.HAL_UartSendBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = HAL_UartSendBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartWrite
</UL>

<P><STRONG><a name="[19e]"></a>Insert_Float</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, menu.o(i.Insert_Float))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = Insert_Float &rArr; Dis_Float &rArr; Dis_String &rArr; OLED_Write_String_7 &rArr; LCD_DispChar &rArr; lcd_showchar &rArr; lcd_set_region &rArr; lcd_writeIndex &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_String
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_Float
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Show
</UL>

<P><STRONG><a name="[19f]"></a>Insert_Int</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, menu.o(i.Insert_Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = Insert_Int &rArr; Dis_Int &rArr; Dis_String &rArr; OLED_Write_String_7 &rArr; LCD_DispChar &rArr; lcd_showchar &rArr; lcd_set_region &rArr; lcd_writeIndex &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_String
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_Int
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Show
</UL>

<P><STRONG><a name="[1a0]"></a>Insert_Page</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, menu.o(i.Insert_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = Insert_Page &rArr; Dis_Head &rArr; LCD_DispChar &rArr; lcd_showchar &rArr; lcd_set_region &rArr; lcd_writeIndex &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_Head
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Show
</UL>

<P><STRONG><a name="[180]"></a>Int_To_String</STRONG> (Thumb, 142 bytes, Stack size 20 bytes, oled.o(i.Int_To_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Int_To_String
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_Int
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Int
</UL>

<P><STRONG><a name="[1a1]"></a>Key_Check</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, keyboard.o(i.Key_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = Key_Check &rArr; Key_Scan &rArr; systick_delay_ms &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu
</UL>

<P><STRONG><a name="[1a3]"></a>Key_Function</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, menu.o(i.Key_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = Key_Function &rArr; lcd_init &rArr; lcd_clear &rArr; lcd_set_region &rArr; lcd_writeIndex &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageNumReduce
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageNumAdd
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineNumReduce
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineNumAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu
</UL>

<P><STRONG><a name="[1a2]"></a>Key_Scan</STRONG> (Thumb, 358 bytes, Stack size 8 bytes, keyboard.o(i.Key_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = Key_Scan &rArr; systick_delay_ms &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Check
</UL>

<P><STRONG><a name="[17e]"></a>LCD_DispChar</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, seekfree_18tft.o(i.LCD_DispChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = LCD_DispChar &rArr; lcd_showchar &rArr; lcd_set_region &rArr; lcd_writeIndex &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_showchar
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extra_Show
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_String_7
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_Head
</UL>

<P><STRONG><a name="[1ac]"></a>LCD_DispString</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, seekfree_18tft.o(i.LCD_DispString))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = LCD_DispString &rArr; lcd_showchar &rArr; lcd_set_region &rArr; lcd_writeIndex &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_showchar
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Int
</UL>

<P><STRONG><a name="[bd]"></a>LPI2C1_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_lpi2c.o(i.LPI2C1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C1_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>LPI2C2_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_lpi2c.o(i.LPI2C2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C2_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[bf]"></a>LPI2C3_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_lpi2c.o(i.LPI2C3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C3_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[c0]"></a>LPI2C4_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_lpi2c.o(i.LPI2C4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C4_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>LPSPI1_DriverIRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_lpspi.o(i.LPSPI1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = LPSPI1_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[c2]"></a>LPSPI2_DriverIRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_lpspi.o(i.LPSPI2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = LPSPI2_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>LPSPI3_DriverIRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_lpspi.o(i.LPSPI3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = LPSPI3_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>LPSPI4_DriverIRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_lpspi.o(i.LPSPI4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = LPSPI4_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[1af]"></a>LPSPI_CheckTransferArgument</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fsl_lpspi.o(i.LPSPI_CheckTransferArgument))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = LPSPI_CheckTransferArgument &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[1b1]"></a>LPSPI_GetInstance</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fsl_lpspi.o(i.LPSPI_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = LPSPI_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SetDummyData
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
</UL>

<P><STRONG><a name="[1b2]"></a>LPSPI_MasterGetDefaultConfig</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, fsl_lpspi.o(i.LPSPI_MasterGetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = LPSPI_MasterGetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[1b3]"></a>LPSPI_MasterInit</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, fsl_lpspi.o(i.LPSPI_MasterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = LPSPI_MasterInit &rArr; LPSPI_MasterSetDelayTimes &rArr; LPSPI_MasterSetDelayScaler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SetOnePcsPolarity
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SetMasterSlaveMode
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SetFifoWatermarks
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_Enable
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SetDummyData
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterSetDelayTimes
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterSetBaudRate
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[1b6]"></a>LPSPI_MasterSetBaudRate</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, fsl_lpspi.o(i.LPSPI_MasterSetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = LPSPI_MasterSetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
</UL>

<P><STRONG><a name="[1bb]"></a>LPSPI_MasterSetDelayScaler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_lpspi.o(i.LPSPI_MasterSetDelayScaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = LPSPI_MasterSetDelayScaler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterSetDelayTimes
</UL>

<P><STRONG><a name="[1b9]"></a>LPSPI_MasterSetDelayTimes</STRONG> (Thumb, 352 bytes, Stack size 72 bytes, fsl_lpspi.o(i.LPSPI_MasterSetDelayTimes))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = LPSPI_MasterSetDelayTimes &rArr; LPSPI_MasterSetDelayScaler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterSetDelayScaler
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
</UL>

<P><STRONG><a name="[1bc]"></a>LPSPI_MasterTransferBlocking</STRONG> (Thumb, 564 bytes, Stack size 80 bytes, fsl_lpspi.o(i.LPSPI_MasterTransferBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_WriteData
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SeparateReadData
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_ReadData
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetTxFifoCount
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetStatusFlags
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetRxFifoSize
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetRxFifoCount
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_FlushFifo
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_Enable
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CombineWriteData
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_ClearStatusFlags
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetInstance
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CheckTransferArgument
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_mosi
</UL>

<P><STRONG><a name="[247]"></a>LPSPI_Reset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_lpspi.o(i.LPSPI_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[1ba]"></a>LPSPI_SetDummyData</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fsl_lpspi.o(i.LPSPI_SetDummyData))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = LPSPI_SetDummyData &rArr; LPSPI_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
</UL>

<P><STRONG><a name="[b5]"></a>LPUART1_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>LPUART2_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>LPUART3_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART3_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>LPUART4_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART4_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[b9]"></a>LPUART5_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART5_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>LPUART6_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART6_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>LPUART7_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART7_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[bc]"></a>LPUART8_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART8_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART8_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[1c6]"></a>LPUART_Deinit</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, fsl_lpuart.o(i.LPUART_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = LPUART_Deinit &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[1cd]"></a>LPUART_DisableInterrupts</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fsl_lpuart.o(i.LPUART_DisableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferHandleIRQ
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_irq
</UL>

<P><STRONG><a name="[254]"></a>LPUART_EnableInterrupts</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fsl_lpuart.o(i.LPUART_EnableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_irq
</UL>

<P><STRONG><a name="[199]"></a>LPUART_GetDefaultConfig</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = LPUART_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[1cc]"></a>LPUART_GetEnabledInterrupts</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_lpuart.o(i.LPUART_GetEnabledInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferHandleIRQ
</UL>

<P><STRONG><a name="[1c7]"></a>LPUART_GetInstance</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_lpuart.o(i.LPUART_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = LPUART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferCreateHandle
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Deinit
</UL>

<P><STRONG><a name="[1cb]"></a>LPUART_GetStatusFlags</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_lpuart.o(i.LPUART_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferHandleIRQ
</UL>

<P><STRONG><a name="[19a]"></a>LPUART_Init</STRONG> (Thumb, 548 bytes, Stack size 56 bytes, fsl_lpuart.o(i.LPUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[1c9]"></a>LPUART_TransferCreateHandle</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, fsl_lpuart.o(i.LPUART_TransferCreateHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = LPUART_TransferCreateHandle &rArr; LPUART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_handle
</UL>

<P><STRONG><a name="[1ca]"></a>LPUART_TransferGetRxRingBufferLength</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_lpuart.o(i.LPUART_TransferGetRxRingBufferLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = LPUART_TransferGetRxRingBufferLength &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferIsRxRingBufferFull
</UL>

<P><STRONG><a name="[d3]"></a>LPUART_TransferHandleIRQ</STRONG> (Thumb, 588 bytes, Stack size 32 bytes, fsl_lpuart.o(i.LPUART_TransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = LPUART_TransferHandleIRQ &rArr; LPUART_TransferIsRxRingBufferFull &rArr; LPUART_TransferGetRxRingBufferLength &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetEnabledInterrupts
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_DisableInterrupts
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteNonBlocking
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferIsRxRingBufferFull
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ReadNonBlocking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_lpuart.o(i.LPUART_TransferCreateHandle)
</UL>
<P><STRONG><a name="[19d]"></a>LPUART_WriteBlocking</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fsl_lpuart.o(i.LPUART_WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = LPUART_WriteBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putbuff
</UL>

<P><STRONG><a name="[1f9]"></a>LeftPiCalc</STRONG> (Thumb, 354 bytes, Stack size 0 bytes, spd.o(i.LeftPiCalc))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedControl
</UL>

<P><STRONG><a name="[1a8]"></a>LineNumAdd</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, menu.o(i.LineNumAdd))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Function
</UL>

<P><STRONG><a name="[1a4]"></a>LineNumReduce</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, menu.o(i.LineNumReduce))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Function
</UL>

<P><STRONG><a name="[1d0]"></a>MCP4452_ADC_self_steady</STRONG> (Thumb, 488 bytes, Stack size 24 bytes, mcp4452.o(i.MCP4452_ADC_self_steady))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = MCP4452_ADC_self_steady &rArr; MCP4452_val_ALL_init &rArr; MCP4452_val_4init &rArr; simiic_write_reg &rArr; send_ch &rArr; sccb_waitack &rArr; simiic_delay &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP4452_val_ALL_init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resistence_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d3]"></a>MCP4452_all_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mcp4452.o(i.MCP4452_all_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = MCP4452_all_init &rArr; MCP4452_set_all_on &rArr; MCP4452_set_4on &rArr; simiic_write_reg &rArr; send_ch &rArr; sccb_waitack &rArr; simiic_delay &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP4452_set_all_on
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP4452_set_all_FScale
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numchange_init
</UL>

<P><STRONG><a name="[1d7]"></a>MCP4452_set_4FScale</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mcp4452.o(i.MCP4452_set_4FScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = MCP4452_set_4FScale &rArr; simiic_write_reg &rArr; send_ch &rArr; sccb_waitack &rArr; simiic_delay &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP4452_set_all_FScale
</UL>

<P><STRONG><a name="[1d9]"></a>MCP4452_set_4on</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mcp4452.o(i.MCP4452_set_4on))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = MCP4452_set_4on &rArr; simiic_write_reg &rArr; send_ch &rArr; sccb_waitack &rArr; simiic_delay &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP4452_set_all_on
</UL>

<P><STRONG><a name="[1d6]"></a>MCP4452_set_all_FScale</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mcp4452.o(i.MCP4452_set_all_FScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = MCP4452_set_all_FScale &rArr; MCP4452_set_4FScale &rArr; simiic_write_reg &rArr; send_ch &rArr; sccb_waitack &rArr; simiic_delay &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP4452_set_4FScale
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP4452_all_init
</UL>

<P><STRONG><a name="[1d5]"></a>MCP4452_set_all_on</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mcp4452.o(i.MCP4452_set_all_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = MCP4452_set_all_on &rArr; MCP4452_set_4on &rArr; simiic_write_reg &rArr; send_ch &rArr; sccb_waitack &rArr; simiic_delay &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP4452_set_4on
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP4452_all_init
</UL>

<P><STRONG><a name="[1da]"></a>MCP4452_val_4init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, mcp4452.o(i.MCP4452_val_4init))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = MCP4452_val_4init &rArr; simiic_write_reg &rArr; send_ch &rArr; sccb_waitack &rArr; simiic_delay &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP4452_val_ALL_init
</UL>

<P><STRONG><a name="[1d2]"></a>MCP4452_val_ALL_init</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, mcp4452.o(i.MCP4452_val_ALL_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = MCP4452_val_ALL_init &rArr; MCP4452_val_4init &rArr; simiic_write_reg &rArr; send_ch &rArr; sccb_waitack &rArr; simiic_delay &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP4452_val_4init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP4452_ADC_self_steady
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numchange_init
</UL>

<P><STRONG><a name="[1db]"></a>Main_Show</STRONG> (Thumb, 390 bytes, Stack size 8 bytes, menu.o(i.Main_Show))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = Main_Show &rArr; Insert_Float &rArr; Dis_Float &rArr; Dis_String &rArr; OLED_Write_String_7 &rArr; LCD_DispChar &rArr; lcd_showchar &rArr; lcd_set_region &rArr; lcd_writeIndex &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Insert_Page
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Insert_Int
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Insert_Float
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu
</UL>

<P><STRONG><a name="[1dc]"></a>Menu</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, menu.o(i.Menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = Menu &rArr; Main_Show &rArr; Insert_Float &rArr; Dis_Float &rArr; Dis_String &rArr; OLED_Write_String_7 &rArr; LCD_DispChar &rArr; lcd_showchar &rArr; lcd_set_region &rArr; lcd_writeIndex &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Show
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Function
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extra_Show
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[188]"></a>OLED_Write_Int</STRONG> (Thumb, 32 bytes, Stack size 40 bytes, oled.o(i.OLED_Write_Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = OLED_Write_Int &rArr; LCD_DispString &rArr; lcd_showchar &rArr; lcd_set_region &rArr; lcd_writeIndex &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispString
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_To_String
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extra_Show
</UL>

<P><STRONG><a name="[181]"></a>OLED_Write_String_7</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, screen.o(i.OLED_Write_String_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = OLED_Write_String_7 &rArr; LCD_DispChar &rArr; lcd_showchar &rArr; lcd_set_region &rArr; lcd_writeIndex &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispChar
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_String
</UL>

<P><STRONG><a name="[1dd]"></a>PIT_Deinit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fsl_pit.o(i.PIT_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = PIT_Deinit &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetInstance
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_init
</UL>

<P><STRONG><a name="[8d]"></a>PIT_IRQHandler</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, isr.o(i.PIT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = PIT_IRQHandler &rArr; type_change &rArr; train_smotor_control &rArr; pwm_duty &rArr; PWM_UpdatePwmDutycycle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;train_ad_collection
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_send
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedControl
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetStatusFlags
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ClearStatusFlags
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_change
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[1e5]"></a>PIT_Init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, fsl_pit.o(i.PIT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = PIT_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetInstance
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_init
</UL>

<P><STRONG><a name="[1e6]"></a>PWM_Deinit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fsl_pwm.o(i.PWM_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = PWM_Deinit &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetInstance
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[1e8]"></a>PWM_GetDefaultConfig</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fsl_pwm.o(i.PWM_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = PWM_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[1e9]"></a>PWM_Init</STRONG> (Thumb, 414 bytes, Stack size 24 bytes, fsl_pwm.o(i.PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = PWM_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetInstance
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[1ea]"></a>PWM_SetupPwm</STRONG> (Thumb, 880 bytes, Stack size 56 bytes, fsl_pwm.o(i.PWM_SetupPwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = PWM_SetupPwm &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[1eb]"></a>PWM_UpdatePwmDutycycle</STRONG> (Thumb, 590 bytes, Stack size 48 bytes, fsl_pwm.o(i.PWM_UpdatePwmDutycycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = PWM_UpdatePwmDutycycle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_duty
</UL>

<P><STRONG><a name="[1a7]"></a>PageNumAdd</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, menu.o(i.PageNumAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = PageNumAdd &rArr; lcd_clear &rArr; lcd_set_region &rArr; lcd_writeIndex &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Function
</UL>

<P><STRONG><a name="[1a6]"></a>PageNumReduce</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, menu.o(i.PageNumReduce))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = PageNumReduce &rArr; lcd_clear &rArr; lcd_set_region &rArr; lcd_writeIndex &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Function
</UL>

<P><STRONG><a name="[1ed]"></a>Profiling</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, main.o(i.Profiling))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Profiling &rArr; _ProfOnHit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProfOnHit
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_C_Handler
</UL>

<P><STRONG><a name="[1ef]"></a>QTMR_Deinit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fsl_qtmr.o(i.QTMR_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = QTMR_Deinit &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_GetInstance
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_quad_init
</UL>

<P><STRONG><a name="[1f1]"></a>QTMR_GetDefaultConfig</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fsl_qtmr.o(i.QTMR_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = QTMR_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_quad_init
</UL>

<P><STRONG><a name="[1f2]"></a>QTMR_Init</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, fsl_qtmr.o(i.QTMR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = QTMR_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_GetInstance
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_quad_init
</UL>

<P><STRONG><a name="[1fa]"></a>RightPiCalc</STRONG> (Thumb, 354 bytes, Stack size 0 bytes, spd.o(i.RightPiCalc))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedControl
</UL>

<P><STRONG><a name="[c7]"></a>SAI1_DriverIRQHandler</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, fsl_sai.o(i.SAI1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SAI1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>SAI2_DriverIRQHandler</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, fsl_sai.o(i.SAI2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SAI2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[c9]"></a>SAI3_RX_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_sai.o(i.SAI3_RX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = SAI3_RX_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[ca]"></a>SAI3_TX_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_sai.o(i.SAI3_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = SAI3_TX_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[cb]"></a>SPDIF_DriverIRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fsl_spdif.o(i.SPDIF_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPDIF_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[170]"></a>SerialManager_Init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, serial_manager.o(i.SerialManager_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[172]"></a>SerialManager_OpenReadHandle</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, serial_manager.o(i.SerialManager_OpenReadHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = SerialManager_OpenReadHandle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[171]"></a>SerialManager_OpenWriteHandle</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, serial_manager.o(i.SerialManager_OpenWriteHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = SerialManager_OpenWriteHandle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[176]"></a>SerialManager_WriteBlocking</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, serial_manager.o(i.SerialManager_WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SerialManager_WriteBlocking &rArr; SerialManager_Write &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendData
</UL>

<P><STRONG><a name="[1f3]"></a>Serial_UartInit</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, serial_port_uart.o(i.Serial_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = Serial_UartInit &rArr; HAL_UartInit &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
</UL>

<P><STRONG><a name="[1f5]"></a>Serial_UartWrite</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, serial_port_uart.o(i.Serial_UartWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = Serial_UartWrite &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_StartWriting
</UL>

<P><STRONG><a name="[1e2]"></a>SpeedControl</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, spd.o(i.SpeedControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = SpeedControl &rArr; let_it_stop &rArr; pwm_duty &rArr; PWM_UpdatePwmDutycycle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;let_it_stop
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedGet
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RightPiCalc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftPiCalc
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GiveDriveDuty
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpectSpeedGet
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanTmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
</UL>

<P><STRONG><a name="[1f7]"></a>SpeedGet</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, spd.o(i.SpeedGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SpeedGet &rArr; qtimer_quad_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_quad_get
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_quad_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedControl
</UL>

<P><STRONG><a name="[1ff]"></a>SteerInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, init.o(i.SteerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = SteerInit &rArr; pwm_init &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[175]"></a>StrFormatPrintf</STRONG> (Thumb, 1588 bytes, Stack size 160 bytes, fsl_str.o(i.StrFormatPrintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRadixNumToString
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[e9]"></a>SysTick_C_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.SysTick_C_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SysTick_C_Handler &rArr; Profiling &rArr; _ProfOnHit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Profiling
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[11a]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, system_mimxrt1021.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SystemCoreClockUpdate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[a2]"></a>SystemInit</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, system_mimxrt1021.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SCB_EnableDCache
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitHook
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableICache
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableDCache
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[203]"></a>SystemInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_mimxrt1021.o(i.SystemInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[ce]"></a>USDHC1_DriverIRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_usdhc.o(i.USDHC1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USDHC1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[cf]"></a>USDHC2_DriverIRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_usdhc.o(i.USDHC2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USDHC2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[130]"></a>_CI_FreeAll</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, nncie.o(i._CI_FreeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _CI_FreeAll &rArr; CIPort_Free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIPort_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[1ee]"></a>_ProfOnHit</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, main.o(i._ProfOnHit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _ProfOnHit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Profiling
</UL>

<P><STRONG><a name="[210]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_assert</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_assert.o(i.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitExternalClk (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq (via Veneer)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetChannelConfig
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetDefaultConfig
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DoAutoCalibration
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetInstance
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_DriverIRQHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_DriverIRQHandler
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetInstance
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SeparateReadData
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CombineWriteData
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_GetDefaultConfig
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_GetInstance
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetInstance
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_GetInstance
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_UpdatePwmDutycycle
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetupPwm
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetDefaultConfig
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetInstance
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetInstance
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteBlocking
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferHandleIRQ
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferGetRxRingBufferLength
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferCreateHandle
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteNonBlocking
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferIsRxRingBufferFull
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ReadNonBlocking
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterSetDelayScaler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterSetBaudRate
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterGetDefaultConfig
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetInstance
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CheckTransferArgument
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI4_DriverIRQHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI3_DriverIRQHandler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI2_DriverIRQHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI1_DriverIRQHandler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI3_TX_DriverIRQHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI3_RX_DriverIRQHandler
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_Init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_GetDefaultConfig
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartWrite
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartInit
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Write
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendData
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_mean_filter
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_iomuxc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_convert
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_iomuxc
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_SetOutputCompareValue
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_mosi
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_iomuxc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iomuxc
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_iomuxc
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_region
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>

<P><STRONG><a name="[159]"></a>__hardfp_acosf</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, acosf.o(i.__hardfp_acosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[168]"></a>__hardfp_modf</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, modf.o(i.__hardfp_modf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_modf
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[169]"></a>__hardfp_pow</STRONG> (Thumb, 2140 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[158]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[20e]"></a>__kernel_poly</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[208]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[207]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[20c]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[209]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[20d]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[205]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[206]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[211]"></a>adc_convert</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, zf_adc.o(i.adc_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = adc_convert &rArr; ADC_SetChannelConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_mean_filter
</UL>

<P><STRONG><a name="[10f]"></a>adc_init</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, zf_adc.o(i.adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = adc_init &rArr; adc_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetDefaultConfig
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DoAutoCalibration
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_iomuxc
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
</UL>

<P><STRONG><a name="[212]"></a>adc_iomuxc</STRONG> (Thumb, 314 bytes, Stack size 8 bytes, zf_adc.o(i.adc_iomuxc))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = adc_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[24b]"></a>adc_max_work</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adcollection.o(i.adc_max_work))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;train_ad_collection
</UL>

<P><STRONG><a name="[214]"></a>adc_mean_filter</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, zf_adc.o(i.adc_mean_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = adc_mean_filter &rArr; adc_convert &rArr; ADC_SetChannelConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;train_ad_collection
</UL>

<P><STRONG><a name="[24c]"></a>adc_min_work</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adcollection.o(i.adc_min_work))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;train_ad_collection
</UL>

<P><STRONG><a name="[132]"></a>aia_HWC_q15_add2</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, aia_cmsisnn_ext.o(i.aia_HWC_q15_add2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = aia_HWC_q15_add2
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[131]"></a>aia_HWC_q7_add2</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, aia_cmsisnn_ext.o(i.aia_HWC_q7_add2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = aia_HWC_q7_add2
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[134]"></a>aia_avepool_q15_HWC</STRONG> (Thumb, 272 bytes, Stack size 116 bytes, aia_cmsisnn_ext.o(i.aia_avepool_q15_HWC))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = aia_avepool_q15_HWC
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[13a]"></a>aia_concat</STRONG> (Thumb, 838 bytes, Stack size 152 bytes, aia_cmsisnn_ext.o(i.aia_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = aia_concat
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[13c]"></a>aia_convolve_1x1_HWC_q15_fast_nonsquare</STRONG> (Thumb, 284 bytes, Stack size 88 bytes, aia_cmsisnn_ext.o(i.aia_convolve_1x1_HWC_q15_fast_nonsquare))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = aia_convolve_1x1_HWC_q15_fast_nonsquare
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[142]"></a>aia_convolve_HWC_q15_RGB</STRONG> (Thumb, 46 bytes, Stack size 96 bytes, aia_cmsisnn_ext.o(i.aia_convolve_HWC_q15_RGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = aia_convolve_HWC_q15_RGB &rArr; arm_convolve_HWC_q15_basic
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q15_basic
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[137]"></a>aia_depthwise_separable_conv_HWC_q15</STRONG> (Thumb, 542 bytes, Stack size 96 bytes, aia_cmsisnn_ext.o(i.aia_depthwise_separable_conv_HWC_q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = aia_depthwise_separable_conv_HWC_q15
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[139]"></a>aia_depthwise_separable_conv_HWC_q15_nonsquare</STRONG> (Thumb, 394 bytes, Stack size 128 bytes, aia_cmsisnn_ext.o(i.aia_depthwise_separable_conv_HWC_q15_nonsquare))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = aia_depthwise_separable_conv_HWC_q15_nonsquare
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[149]"></a>aia_maxpool_q15_HWC</STRONG> (Thumb, 498 bytes, Stack size 72 bytes, aia_cmsisnn_ext.o(i.aia_maxpool_q15_HWC))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = aia_maxpool_q15_HWC
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[155]"></a>aia_nn_activations_direct_q15</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, aia_cmsisnn_ext.o(i.aia_nn_activations_direct_q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = aia_nn_activations_direct_q15
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[151]"></a>aia_relu4_q15</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, aia_cmsisnn_ext.o(i.aia_relu4_q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = aia_relu4_q15 &rArr; arm_relu_q15
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_relu_q15
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[150]"></a>aia_relu4_q7</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, aia_cmsisnn_ext.o(i.aia_relu4_q7))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = aia_relu4_q7 &rArr; arm_relu_q7
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_relu_q7
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[14d]"></a>aia_relu6_q15</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, aia_cmsisnn_ext.o(i.aia_relu6_q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = aia_relu6_q15 &rArr; arm_relu_q15
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_relu_q15
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[14c]"></a>aia_relu6_q7</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, aia_cmsisnn_ext.o(i.aia_relu6_q7))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = aia_relu6_q7 &rArr; arm_relu_q7
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_relu_q7
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[14f]"></a>aia_relu8_q15</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, aia_cmsisnn_ext.o(i.aia_relu8_q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = aia_relu8_q15 &rArr; arm_relu_q15
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_relu_q15
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[14e]"></a>aia_relu8_q7</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, aia_cmsisnn_ext.o(i.aia_relu8_q7))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = aia_relu8_q7 &rArr; arm_relu_q7
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_relu_q7
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[153]"></a>aia_softmax_multi_q15</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, aia_cmsisnn_ext.o(i.aia_softmax_multi_q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = aia_softmax_multi_q15 &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[152]"></a>aia_softmax_multi_q7</STRONG> (Thumb, 234 bytes, Stack size 36 bytes, aia_cmsisnn_ext.o(i.aia_softmax_multi_q7))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = aia_softmax_multi_q7
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[133]"></a>arm_avepool_q7_HWC</STRONG> (Thumb, 384 bytes, Stack size 72 bytes, arm_pool_q7_hwc.o(i.arm_avepool_q7_HWC))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = arm_avepool_q7_HWC &rArr; accumulate_q7_to_q15
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_scale_back_q15_to_q7
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accumulate_q7_to_q15
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_q7_to_q15_no_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[135]"></a>arm_avepool_q7_HWC_nonsquare</STRONG> (Thumb, 268 bytes, Stack size 36 bytes, arm_avepool_q7_hwc_nonsquare.o(i.arm_avepool_q7_HWC_nonsquare))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = arm_avepool_q7_HWC_nonsquare
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[13b]"></a>arm_convolve_1x1_HWC_q7_fast_nonsquare</STRONG> (Thumb, 422 bytes, Stack size 80 bytes, arm_convolve_1x1_hwc_q7_fast_nonsquare.o(i.arm_convolve_1x1_HWC_q7_fast_nonsquare))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = arm_convolve_1x1_HWC_q7_fast_nonsquare &rArr; arm_nn_mat_mult_kernel_q7_q15_reordered
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_q7_to_q15_reordered_no_shift
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_mat_mult_kernel_q7_q15_reordered
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[13e]"></a>arm_convolve_HWC_q15_basic</STRONG> (Thumb, 374 bytes, Stack size 88 bytes, arm_convolve_hwc_q15_basic.o(i.arm_convolve_HWC_q15_basic))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = arm_convolve_HWC_q15_basic
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aia_convolve_HWC_q15_RGB
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[140]"></a>arm_convolve_HWC_q15_fast</STRONG> (Thumb, 778 bytes, Stack size 112 bytes, arm_convolve_hwc_q15_fast.o(i.arm_convolve_HWC_q15_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = arm_convolve_HWC_q15_fast
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[145]"></a>arm_convolve_HWC_q15_fast_nonsquare</STRONG> (Thumb, 790 bytes, Stack size 120 bytes, arm_convolve_hwc_q15_fast_nonsquare.o(i.arm_convolve_HWC_q15_fast_nonsquare))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = arm_convolve_HWC_q15_fast_nonsquare
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[141]"></a>arm_convolve_HWC_q7_RGB</STRONG> (Thumb, 578 bytes, Stack size 96 bytes, arm_convolve_hwc_q7_rgb.o(i.arm_convolve_HWC_q7_RGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = arm_convolve_HWC_q7_RGB &rArr; arm_nn_mat_mult_kernel_q7_q15
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_mat_mult_kernel_q7_q15
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[13d]"></a>arm_convolve_HWC_q7_basic</STRONG> (Thumb, 532 bytes, Stack size 96 bytes, arm_convolve_hwc_q7_basic.o(i.arm_convolve_HWC_q7_basic))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = arm_convolve_HWC_q7_basic &rArr; arm_nn_mat_mult_kernel_q7_q15
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_q7_to_q15_no_shift
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_mat_mult_kernel_q7_q15
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[143]"></a>arm_convolve_HWC_q7_basic_nonsquare</STRONG> (Thumb, 546 bytes, Stack size 96 bytes, arm_convolve_hwc_q7_basic_nonsquare.o(i.arm_convolve_HWC_q7_basic_nonsquare))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = arm_convolve_HWC_q7_basic_nonsquare &rArr; arm_nn_mat_mult_kernel_q7_q15
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_q7_to_q15_no_shift
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_mat_mult_kernel_q7_q15
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[13f]"></a>arm_convolve_HWC_q7_fast</STRONG> (Thumb, 1366 bytes, Stack size 88 bytes, arm_convolve_hwc_q7_fast.o(i.arm_convolve_HWC_q7_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = arm_convolve_HWC_q7_fast &rArr; arm_nn_mat_mult_kernel_q7_q15_reordered
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_q7_to_q15_reordered_no_shift
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_mat_mult_kernel_q7_q15_reordered
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[144]"></a>arm_convolve_HWC_q7_fast_nonsquare</STRONG> (Thumb, 1392 bytes, Stack size 80 bytes, arm_convolve_hwc_q7_fast_nonsquare.o(i.arm_convolve_HWC_q7_fast_nonsquare))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = arm_convolve_HWC_q7_fast_nonsquare &rArr; arm_nn_mat_mult_kernel_q7_q15_reordered
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_q7_to_q15_reordered_no_shift
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_mat_mult_kernel_q7_q15_reordered
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[136]"></a>arm_depthwise_separable_conv_HWC_q7</STRONG> (Thumb, 884 bytes, Stack size 112 bytes, arm_depthwise_separable_conv_hwc_q7.o(i.arm_depthwise_separable_conv_HWC_q7))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = arm_depthwise_separable_conv_HWC_q7
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[138]"></a>arm_depthwise_separable_conv_HWC_q7_nonsquare</STRONG> (Thumb, 922 bytes, Stack size 112 bytes, arm_depthwise_separable_conv_hwc_q7_nonsquare.o(i.arm_depthwise_separable_conv_HWC_q7_nonsquare))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = arm_depthwise_separable_conv_HWC_q7_nonsquare
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[147]"></a>arm_fully_connected_q15</STRONG> (Thumb, 416 bytes, Stack size 56 bytes, arm_fully_connected_q15.o(i.arm_fully_connected_q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = arm_fully_connected_q15
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[146]"></a>arm_fully_connected_q7</STRONG> (Thumb, 478 bytes, Stack size 72 bytes, arm_fully_connected_q7.o(i.arm_fully_connected_q7))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = arm_fully_connected_q7 &rArr; arm_q7_to_q15_reordered_no_shift
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_q7_to_q15_reordered_no_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[148]"></a>arm_maxpool_q7_HWC</STRONG> (Thumb, 324 bytes, Stack size 64 bytes, arm_pool_q7_hwc.o(i.arm_maxpool_q7_HWC))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = arm_maxpool_q7_HWC &rArr; compare_and_replace_if_larger_q7
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_and_replace_if_larger_q7
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[154]"></a>arm_nn_activations_direct_q7</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, arm_nn_activations_q7.o(i.arm_nn_activations_direct_q7))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = arm_nn_activations_direct_q7
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[21c]"></a>arm_nn_mat_mult_kernel_q7_q15</STRONG> (Thumb, 1132 bytes, Stack size 112 bytes, arm_nn_mat_mult_kernel_q7_q15.o(i.arm_nn_mat_mult_kernel_q7_q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = arm_nn_mat_mult_kernel_q7_q15
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_RGB
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_basic_nonsquare
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_basic
</UL>

<P><STRONG><a name="[21b]"></a>arm_nn_mat_mult_kernel_q7_q15_reordered</STRONG> (Thumb, 618 bytes, Stack size 88 bytes, arm_nn_mat_mult_kernel_q7_q15_reordered.o(i.arm_nn_mat_mult_kernel_q7_q15_reordered))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = arm_nn_mat_mult_kernel_q7_q15_reordered
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_fast_nonsquare
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_fast
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_1x1_HWC_q7_fast_nonsquare
</UL>

<P><STRONG><a name="[217]"></a>arm_q7_to_q15_no_shift</STRONG> (Thumb, 80 bytes, Stack size 28 bytes, arm_q7_to_q15_no_shift.o(i.arm_q7_to_q15_no_shift))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = arm_q7_to_q15_no_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_avepool_q7_HWC
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_basic_nonsquare
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_basic
</UL>

<P><STRONG><a name="[21a]"></a>arm_q7_to_q15_reordered_no_shift</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, arm_q7_to_q15_reordered_no_shift.o(i.arm_q7_to_q15_reordered_no_shift))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = arm_q7_to_q15_reordered_no_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fully_connected_q7
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_fast_nonsquare
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_fast
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_1x1_HWC_q7_fast_nonsquare
</UL>

<P><STRONG><a name="[14b]"></a>arm_relu_q15</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, arm_relu_q15.o(i.arm_relu_q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = arm_relu_q15
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aia_relu8_q15
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aia_relu6_q15
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aia_relu4_q15
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[14a]"></a>arm_relu_q7</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, arm_relu_q7.o(i.arm_relu_q7))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = arm_relu_q7
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aia_relu8_q7
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aia_relu6_q7
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aia_relu4_q7
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[157]"></a>arm_softmax_q15</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, arm_softmax_q15.o(i.arm_softmax_q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = arm_softmax_q15 &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[156]"></a>arm_softmax_q7</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, arm_softmax_q7.o(i.arm_softmax_q7))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = arm_softmax_q7
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_zzStep
</UL>

<P><STRONG><a name="[24f]"></a>assist_adc_judge</STRONG> (Thumb, 430 bytes, Stack size 0 bytes, smotorconrol.o(i.assist_adc_judge))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;train_smotor_control
</UL>

<P><STRONG><a name="[21e]"></a>board_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, board.o(i.board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = board_init &rArr; BOARD_InitDebugConsole &rArr; DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootPins
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[252]"></a>cie_data_get</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, main.o(i.cie_data_get))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_change
</UL>

<P><STRONG><a name="[24d]"></a>data_limitation</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, adcollection.o(i.data_limitation))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;train_ad_collection
</UL>

<P><STRONG><a name="[1e3]"></a>data_send</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, adcollection.o(i.data_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = data_send &rArr; seekfree_wireless_send_buff &rArr; gpio_get &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekfree_wireless_send_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
</UL>

<P><STRONG><a name="[221]"></a>encoder_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, init.o(i.encoder_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = encoder_Init &rArr; qtimer_quad_init &rArr; qtimer_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_quad_init
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[20b]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[239]"></a>gpio_dir</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, zf_gpio.o(i.gpio_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sccb_waitack
</UL>

<P><STRONG><a name="[1aa]"></a>gpio_get</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, zf_gpio.o(i.gpio_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = gpio_get &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sccb_waitack
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekfree_wireless_send_buff
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;train_ad_collection
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedControl
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP4452_ADC_self_steady
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
</UL>

<P><STRONG><a name="[1a9]"></a>gpio_init</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, zf_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = gpio_init &rArr; GPIO_PinInit &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekfree_wireless_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iokey_init
</UL>

<P><STRONG><a name="[228]"></a>gpio_set</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, zf_gpio.o(i.gpio_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_stop
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_start
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sccb_waitack
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_writedata_16bit
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_writeIndex
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_writeData
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[223]"></a>gpt_init</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, zf_systick.o(i.gpt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = gpt_init &rArr; GPT_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_GetDefaultConfig
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_Deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay
</UL>

<P><STRONG><a name="[224]"></a>iokey_init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, init.o(i.iokey_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = iokey_init &rArr; gpio_init &rArr; GPIO_PinInit &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[213]"></a>iomuxc_pinconf</STRONG> (Thumb, 25664 bytes, Stack size 24 bytes, zf_iomuxc.o(i.iomuxc_pinconf))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinMux
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinConfig
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_iomuxc
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_iomuxc
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_iomuxc
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iomuxc
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_iomuxc
</UL>

<P><STRONG><a name="[1ec]"></a>lcd_clear</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, seekfree_18tft.o(i.lcd_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = lcd_clear &rArr; lcd_set_region &rArr; lcd_writeIndex &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_writedata_16bit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_region
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageNumReduce
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageNumAdd
</UL>

<P><STRONG><a name="[1a5]"></a>lcd_init</STRONG> (Thumb, 684 bytes, Stack size 16 bytes, seekfree_18tft.o(i.lcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = lcd_init &rArr; lcd_clear &rArr; lcd_set_region &rArr; lcd_writeIndex &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_writeIndex
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_writeData
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Function
</UL>

<P><STRONG><a name="[178]"></a>lcd_set_region</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, seekfree_18tft.o(i.lcd_set_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = lcd_set_region &rArr; lcd_writeIndex &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_writeIndex
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_writeData
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_showchar
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_Cursor
</UL>

<P><STRONG><a name="[187]"></a>lcd_showchar</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, seekfree_18tft.o(i.lcd_showchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = lcd_showchar &rArr; lcd_set_region &rArr; lcd_writeIndex &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_writedata_16bit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_region
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispString
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispChar
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extra_Show
</UL>

<P><STRONG><a name="[22a]"></a>lcd_writeData</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, seekfree_18tft.o(i.lcd_writeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = lcd_writeData &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_mosi
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_region
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[229]"></a>lcd_writeIndex</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, seekfree_18tft.o(i.lcd_writeIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = lcd_writeIndex &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_mosi
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_region
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[179]"></a>lcd_writedata_16bit</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, seekfree_18tft.o(i.lcd_writedata_16bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = lcd_writedata_16bit &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_mosi
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_showchar
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_Cursor
</UL>

<P><STRONG><a name="[1fb]"></a>let_it_stop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spd.o(i.let_it_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = let_it_stop &rArr; pwm_duty &rArr; PWM_UpdatePwmDutycycle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_duty
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedControl
</UL>

<P><STRONG><a name="[241]"></a>limit</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, seekfree_fun.o(i.limit))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;train_smotor_control
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_adc_judge
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_change
</UL>

<P><STRONG><a name="[e3]"></a>main</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = main &rArr; Menu &rArr; Main_Show &rArr; Insert_Float &rArr; Dis_Float &rArr; Dis_String &rArr; OLED_Write_String_7 &rArr; LCD_DispChar &rArr; lcd_showchar &rArr; lcd_set_region &rArr; lcd_writeIndex &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq (via Veneer)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP4452_ADC_self_steady
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_change
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[18b]"></a>mt9v032_vsync</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, seekfree_mt9v032.o(i.mt9v032_vsync))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Combined_16_31_IRQHandler
</UL>

<P><STRONG><a name="[22e]"></a>numchange_init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, init.o(i.numchange_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = numchange_init &rArr; MCP4452_val_ALL_init &rArr; MCP4452_val_4init &rArr; simiic_write_reg &rArr; send_ch &rArr; sccb_waitack &rArr; simiic_delay &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP4452_val_ALL_init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP4452_all_init
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[22f]"></a>pit_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, zf_pit.o(i.pit_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = pit_init &rArr; PIT_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Deinit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[230]"></a>pit_interrupt</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, zf_pit.o(i.pit_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pit_interrupt &rArr; PIT_SetTimerChainMode
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_StartTimer
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_SetTimerPeriod
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_SetTimerChainMode
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[197]"></a>pwm_duty</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, zf_pwm.o(i.pwm_duty))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = pwm_duty &rArr; PWM_UpdatePwmDutycycle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_UpdatePwmDutycycle
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetPwmLdok
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;train_smotor_control
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_adc_judge
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_change
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;let_it_stop
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GiveDriveDuty
</UL>

<P><STRONG><a name="[183]"></a>pwm_init</STRONG> (Thumb, 516 bytes, Stack size 64 bytes, zf_pwm.o(i.pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = pwm_init &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq (via Veneer)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetupPwm
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetDefaultConfig
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Deinit
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_iomuxc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_StartTimer
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetPwmLdok
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SteerInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriveInit
</UL>

<P><STRONG><a name="[235]"></a>pwm_iomuxc</STRONG> (Thumb, 512 bytes, Stack size 8 bytes, zf_pwm.o(i.pwm_iomuxc))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = pwm_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[237]"></a>qtimer_iomuxc</STRONG> (Thumb, 710 bytes, Stack size 16 bytes, zf_qtimer.o(i.qtimer_iomuxc))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = qtimer_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_quad_init
</UL>

<P><STRONG><a name="[1fe]"></a>qtimer_quad_clear</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, zf_qtimer.o(i.qtimer_quad_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = qtimer_quad_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedGet
</UL>

<P><STRONG><a name="[1fd]"></a>qtimer_quad_get</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, zf_qtimer.o(i.qtimer_quad_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = qtimer_quad_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedGet
</UL>

<P><STRONG><a name="[222]"></a>qtimer_quad_init</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, zf_qtimer.o(i.qtimer_quad_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = qtimer_quad_init &rArr; qtimer_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_Init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_GetDefaultConfig
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_Deinit
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_iomuxc
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encoder_Init
</UL>

<P><STRONG><a name="[1d1]"></a>resistence_protect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mcp4452.o(i.resistence_protect))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP4452_ADC_self_steady
</UL>

<P><STRONG><a name="[18c]"></a>scc8660_vsync</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, seekfree_scc8660.o(i.scc8660_vsync))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Combined_16_31_IRQHandler
</UL>

<P><STRONG><a name="[23b]"></a>seekfree_wireless_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, seekfree_wireless.o(i.seekfree_wireless_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = seekfree_wireless_init &rArr; uart_init &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_handle
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_irq
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirelessInit
</UL>

<P><STRONG><a name="[220]"></a>seekfree_wireless_send_buff</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, seekfree_wireless.o(i.seekfree_wireless_send_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = seekfree_wireless_send_buff &rArr; gpio_get &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putbuff
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_send
</UL>

<P><STRONG><a name="[23f]"></a>send_ch</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, seekfree_iic.o(i.send_ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = send_ch &rArr; sccb_waitack &rArr; simiic_delay &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_delay
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sccb_waitack
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_write_reg
</UL>

<P><STRONG><a name="[240]"></a>short_adc_judge</STRONG> (Thumb, 482 bytes, Stack size 8 bytes, smotorconrol.o(i.short_adc_judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = short_adc_judge &rArr; pwm_duty &rArr; PWM_UpdatePwmDutycycle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_duty
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_type_choose
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_change
</UL>

<P><STRONG><a name="[23a]"></a>simiic_delay</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, seekfree_iic.o(i.simiic_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = simiic_delay &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq (via Veneer)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_stop
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_start
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sccb_waitack
</UL>

<P><STRONG><a name="[1d4]"></a>simiic_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, seekfree_iic.o(i.simiic_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = simiic_init &rArr; gpio_init &rArr; GPIO_PinInit &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP4452_all_init
</UL>

<P><STRONG><a name="[244]"></a>simiic_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, seekfree_iic.o(i.simiic_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = simiic_start &rArr; simiic_delay &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_write_reg
</UL>

<P><STRONG><a name="[245]"></a>simiic_stop</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, seekfree_iic.o(i.simiic_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = simiic_stop &rArr; simiic_delay &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_write_reg
</UL>

<P><STRONG><a name="[1d8]"></a>simiic_write_reg</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, seekfree_iic.o(i.simiic_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = simiic_write_reg &rArr; send_ch &rArr; sccb_waitack &rArr; simiic_delay &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_stop
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_start
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP4452_val_4init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP4452_set_4on
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP4452_set_4FScale
</UL>

<P><STRONG><a name="[227]"></a>spi_init</STRONG> (Thumb, 346 bytes, Stack size 72 bytes, zf_spi.o(i.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = spi_init &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq (via Veneer)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_Reset
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterGetDefaultConfig
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_iomuxc
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_Enable
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[246]"></a>spi_iomuxc</STRONG> (Thumb, 1122 bytes, Stack size 24 bytes, zf_spi.o(i.spi_iomuxc))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = spi_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[22b]"></a>spi_mosi</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, zf_spi.o(i.spi_mosi))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = spi_mosi &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_writedata_16bit
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_writeIndex
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_writeData
</UL>

<P><STRONG><a name="[20a]"></a>sqrt</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[204]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[22c]"></a>system_init</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, init.o(i.system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = system_init &rArr; numchange_init &rArr; MCP4452_val_ALL_init &rArr; MCP4452_val_4init &rArr; simiic_write_reg &rArr; send_ch &rArr; sccb_waitack &rArr; simiic_delay &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq (via Veneer)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_interrupt
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirelessInit
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numchange_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iokey_init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encoder_Init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SteerInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriveInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[243]"></a>systick_delay</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, zf_systick.o(i.systick_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = systick_delay &rArr; gpt_init &rArr; GPT_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_StartTimer
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_SetOutputCompareValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_delay
</UL>

<P><STRONG><a name="[1ab]"></a>systick_delay_ms</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, zf_systick.o(i.systick_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = systick_delay_ms &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq (via Veneer)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP4452_all_init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP4452_set_4FScale
</UL>

<P><STRONG><a name="[1e0]"></a>train_ad_collection</STRONG> (Thumb, 1690 bytes, Stack size 8 bytes, adcollection.o(i.train_ad_collection))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = train_ad_collection &rArr; adc_mean_filter &rArr; adc_convert &rArr; ADC_SetChannelConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_limitation
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_min_work
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_max_work
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_mean_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
</UL>

<P><STRONG><a name="[24e]"></a>train_smotor_control</STRONG> (Thumb, 2294 bytes, Stack size 8 bytes, smotorconrol.o(i.train_smotor_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = train_smotor_control &rArr; pwm_duty &rArr; PWM_UpdatePwmDutycycle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_duty
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_type_choose
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assist_adc_judge
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_change
</UL>

<P><STRONG><a name="[1e1]"></a>type_change</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, main.o(i.type_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = type_change &rArr; train_smotor_control &rArr; pwm_duty &rArr; PWM_UpdatePwmDutycycle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_duty
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;train_smotor_control
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_adc_judge
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_RunModelXIP
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_GetOutMetricInfo
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI_GetModelInfoXIP
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cie_data_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21f]"></a>uart_init</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, zf_uart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = uart_init &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Deinit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iomuxc
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekfree_wireless_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[253]"></a>uart_iomuxc</STRONG> (Thumb, 602 bytes, Stack size 16 bytes, zf_uart.o(i.uart_iomuxc))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = uart_iomuxc &rArr; iomuxc_pinconf &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[23e]"></a>uart_putbuff</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, zf_uart.o(i.uart_putbuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_putbuff &rArr; LPUART_WriteBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekfree_wireless_send_buff
</UL>

<P><STRONG><a name="[23c]"></a>uart_rx_irq</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, zf_uart.o(i.uart_rx_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_rx_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_EnableInterrupts
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekfree_wireless_init
</UL>

<P><STRONG><a name="[23d]"></a>uart_set_handle</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, zf_uart.o(i.uart_set_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = uart_set_handle &rArr; LPUART_TransferCreateHandle &rArr; LPUART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferCreateHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekfree_wireless_init
</UL>

<P><STRONG><a name="[242]"></a>velocity_type_choose</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, smotorconrol.o(i.velocity_type_choose))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;train_smotor_control
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_adc_judge
</UL>

<P><STRONG><a name="[249]"></a>wirelessInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, init.o(i.wirelessInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = wirelessInit &rArr; seekfree_wireless_init &rArr; uart_init &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekfree_wireless_init
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[d6]"></a>wireless_uart_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, seekfree_wireless.o(i.wireless_uart_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wireless_uart_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> seekfree_wireless.o(i.seekfree_wireless_init)
</UL>
<P><STRONG><a name="[255]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[16b]"></a>__aeabi_l2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[29a]"></a>_ll_sto_d</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll), UNUSED)

<P><STRONG><a name="[258]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sfrom_d
</UL>

<P><STRONG><a name="[dd]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[29b]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[29c]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[16a]"></a>__aeabi_d2lz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[257]"></a>_ll_sfrom_d</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[256]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[20f]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[259]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[107]"></a>ADC_EnableHardwareTrigger</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_adc.o(i.ADC_EnableHardwareTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DoAutoCalibration
</UL>

<P><STRONG><a name="[10a]"></a>ADC_GetInstance</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_adc.o(i.ADC_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = ADC_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[10c]"></a>CLOCK_ControlGate</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fsl_adc.o(i.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[25f]"></a>CLOCK_GetOscFreq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetOscFreq))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPerClkFreq
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>

<P><STRONG><a name="[25b]"></a>CLOCK_GetPeriphClkFreq</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetPeriphClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbFreq
</UL>

<P><STRONG><a name="[160]"></a>CLOCK_EnableClock</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, fsl_gpio.o(i.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[18d]"></a>GPIO_GetInstance</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_gpio.o(i.GPIO_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = GPIO_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[15a]"></a>CLOCK_ControlGate</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fsl_gpt.o(i.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_Deinit
</UL>

<P><STRONG><a name="[192]"></a>GPT_GetInstance</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_gpt.o(i.GPT_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = GPT_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_Deinit
</UL>

<P><STRONG><a name="[1ad]"></a>LPI2C_CommonIRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_lpi2c.o(i.LPI2C_CommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPI2C_CommonIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C4_DriverIRQHandler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C3_DriverIRQHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C2_DriverIRQHandler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C1_DriverIRQHandler
</UL>

<P><STRONG><a name="[15b]"></a>CLOCK_ControlGate</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fsl_lpspi.o(i.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[161]"></a>CLOCK_EnableClock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_lpspi.o(i.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
</UL>

<P><STRONG><a name="[1c0]"></a>LPSPI_ClearStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_lpspi.o(i.LPSPI_ClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[1b0]"></a>LPSPI_CombineWriteData</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, fsl_lpspi.o(i.LPSPI_CombineWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = LPSPI_CombineWriteData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[1ae]"></a>LPSPI_CommonIRQHandler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fsl_lpspi.o(i.LPSPI_CommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPSPI_CommonIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI4_DriverIRQHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI3_DriverIRQHandler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI2_DriverIRQHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI1_DriverIRQHandler
</UL>

<P><STRONG><a name="[1b8]"></a>LPSPI_Enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_lpspi.o(i.LPSPI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
</UL>

<P><STRONG><a name="[1bf]"></a>LPSPI_FlushFifo</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpspi.o(i.LPSPI_FlushFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPSPI_FlushFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[1c5]"></a>LPSPI_GetRxFifoCount</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_lpspi.o(i.LPSPI_GetRxFifoCount))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[1be]"></a>LPSPI_GetRxFifoSize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_lpspi.o(i.LPSPI_GetRxFifoSize))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[1bd]"></a>LPSPI_GetStatusFlags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_lpspi.o(i.LPSPI_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[1c1]"></a>LPSPI_GetTxFifoCount</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_lpspi.o(i.LPSPI_GetTxFifoCount))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[1c3]"></a>LPSPI_ReadData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_lpspi.o(i.LPSPI_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[1c4]"></a>LPSPI_SeparateReadData</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, fsl_lpspi.o(i.LPSPI_SeparateReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[1b7]"></a>LPSPI_SetFifoWatermarks</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_lpspi.o(i.LPSPI_SetFifoWatermarks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPSPI_SetFifoWatermarks
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
</UL>

<P><STRONG><a name="[1b4]"></a>LPSPI_SetMasterSlaveMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_lpspi.o(i.LPSPI_SetMasterSlaveMode))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
</UL>

<P><STRONG><a name="[1b5]"></a>LPSPI_SetOnePcsPolarity</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fsl_lpspi.o(i.LPSPI_SetOnePcsPolarity))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPSPI_SetOnePcsPolarity
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
</UL>

<P><STRONG><a name="[1c2]"></a>LPSPI_WriteData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_lpspi.o(i.LPSPI_WriteData))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[15c]"></a>CLOCK_ControlGate</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fsl_lpuart.o(i.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Deinit
</UL>

<P><STRONG><a name="[1c8]"></a>LPUART_ReadNonBlocking</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, fsl_lpuart.o(i.LPUART_ReadNonBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = LPUART_ReadNonBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferHandleIRQ
</UL>

<P><STRONG><a name="[1ce]"></a>LPUART_TransferIsRxRingBufferFull</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fsl_lpuart.o(i.LPUART_TransferIsRxRingBufferFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = LPUART_TransferIsRxRingBufferFull &rArr; LPUART_TransferGetRxRingBufferLength &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferGetRxRingBufferLength
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferHandleIRQ
</UL>

<P><STRONG><a name="[1cf]"></a>LPUART_WriteNonBlocking</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fsl_lpuart.o(i.LPUART_WriteNonBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = LPUART_WriteNonBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferHandleIRQ
</UL>

<P><STRONG><a name="[15d]"></a>CLOCK_ControlGate</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fsl_pit.o(i.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Deinit
</UL>

<P><STRONG><a name="[1de]"></a>PIT_GetInstance</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fsl_pit.o(i.PIT_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = PIT_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Deinit
</UL>

<P><STRONG><a name="[15e]"></a>CLOCK_ControlGate</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fsl_pwm.o(i.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Deinit
</UL>

<P><STRONG><a name="[1e7]"></a>PWM_GetInstance</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_pwm.o(i.PWM_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = PWM_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Deinit
</UL>

<P><STRONG><a name="[15f]"></a>CLOCK_ControlGate</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fsl_qtmr.o(i.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_Init
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_Deinit
</UL>

<P><STRONG><a name="[1f0]"></a>QTMR_GetInstance</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_qtmr.o(i.QTMR_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = QTMR_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_Init
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_Deinit
</UL>

<P><STRONG><a name="[167]"></a>ConvertFloatRadixNumToString</STRONG> (Thumb, 434 bytes, Stack size 120 bytes, fsl_str.o(i.ConvertFloatRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_modf
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>

<P><STRONG><a name="[16c]"></a>ConvertRadixNumToString</STRONG> (Thumb, 336 bytes, Stack size 88 bytes, fsl_str.o(i.ConvertRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ConvertRadixNumToString &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>

<P><STRONG><a name="[d2]"></a>DbgConsole_PrintCallback</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fsl_debug_console.o(i.DbgConsole_PrintCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DbgConsole_PrintCallback &rArr; DbgConsole_SendData &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(i.DbgConsole_Printf)
</UL>
<P><STRONG><a name="[202]"></a>SCB_EnableDCache</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, system_mimxrt1021.o(i.SCB_EnableDCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_EnableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[201]"></a>SCB_EnableICache</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, system_mimxrt1021.o(i.SCB_EnableICache))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[19b]"></a>HAL_UartGetStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpuart_adapter.o(i.HAL_UartGetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>

<P><STRONG><a name="[1f4]"></a>SerialManager_StartWriting</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, serial_manager.o(i.SerialManager_StartWriting))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SerialManager_StartWriting &rArr; Serial_UartWrite &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Write
</UL>

<P><STRONG><a name="[1f6]"></a>SerialManager_Write</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, serial_manager.o(i.SerialManager_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = SerialManager_Write &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_StartWriting
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_WriteBlocking
</UL>

<P><STRONG><a name="[162]"></a>CLOCK_EnableClock</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, zf_iomuxc.o(i.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>

<P><STRONG><a name="[226]"></a>IOMUXC_SetPinConfig</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, zf_iomuxc.o(i.IOMUXC_SetPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IOMUXC_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>

<P><STRONG><a name="[225]"></a>IOMUXC_SetPinMux</STRONG> (Thumb, 26 bytes, Stack size 20 bytes, zf_iomuxc.o(i.IOMUXC_SetPinMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IOMUXC_SetPinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>

<P><STRONG><a name="[163]"></a>CLOCK_SetDiv</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, zf_pit.o(i.CLOCK_SetDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = CLOCK_SetDiv &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_init
</UL>

<P><STRONG><a name="[165]"></a>CLOCK_SetMux</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, zf_pit.o(i.CLOCK_SetMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = CLOCK_SetMux &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_init
</UL>

<P><STRONG><a name="[232]"></a>PIT_SetTimerChainMode</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, zf_pit.o(i.PIT_SetTimerChainMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIT_SetTimerChainMode
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_interrupt
</UL>

<P><STRONG><a name="[231]"></a>PIT_SetTimerPeriod</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, zf_pit.o(i.PIT_SetTimerPeriod))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_interrupt
</UL>

<P><STRONG><a name="[233]"></a>PIT_StartTimer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, zf_pit.o(i.PIT_StartTimer))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_interrupt
</UL>

<P><STRONG><a name="[234]"></a>PWM_SetPwmLdok</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, zf_pwm.o(i.PWM_SetPwmLdok))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_SetPwmLdok
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_duty
</UL>

<P><STRONG><a name="[236]"></a>PWM_StartTimer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, zf_pwm.o(i.PWM_StartTimer))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[164]"></a>CLOCK_SetDiv</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, zf_spi.o(i.CLOCK_SetDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = CLOCK_SetDiv &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[166]"></a>CLOCK_SetMux</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, zf_spi.o(i.CLOCK_SetMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = CLOCK_SetMux &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[248]"></a>LPSPI_Enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, zf_spi.o(i.LPSPI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[195]"></a>GPT_SetOutputCompareValue</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, zf_systick.o(i.GPT_SetOutputCompareValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = GPT_SetOutputCompareValue &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay
</UL>

<P><STRONG><a name="[24a]"></a>GPT_StartTimer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, zf_systick.o(i.GPT_StartTimer))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay
</UL>

<P><STRONG><a name="[238]"></a>sccb_waitack</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, seekfree_iic.o(i.sccb_waitack))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = sccb_waitack &rArr; simiic_delay &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch
</UL>

<P><STRONG><a name="[121]"></a>CLOCK_GetDiv</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, board.o(i.CLOCK_GetDiv))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>

<P><STRONG><a name="[11c]"></a>SCB_DisableDCache</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, board.o(i.SCB_DisableDCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_DisableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>

<P><STRONG><a name="[11d]"></a>SCB_EnableDCache</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, board.o(i.SCB_EnableDCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_EnableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>

<P><STRONG><a name="[11e]"></a>SCB_EnableICache</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, board.o(i.SCB_EnableICache))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>

<P><STRONG><a name="[116]"></a>CLOCK_DisableClock</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, clock_config.o(i.CLOCK_DisableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = CLOCK_DisableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[115]"></a>CLOCK_SetDiv</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, clock_config.o(i.CLOCK_SetDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = CLOCK_SetDiv &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[114]"></a>CLOCK_SetMux</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, clock_config.o(i.CLOCK_SetMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = CLOCK_SetMux &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[119]"></a>IOMUXC_SetSaiMClkClockSource</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, clock_config.o(i.IOMUXC_SetSaiMClkClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IOMUXC_SetSaiMClkClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[126]"></a>CLOCK_EnableClock</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, pin_mux.o(i.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[128]"></a>IOMUXC_SetPinConfig</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, pin_mux.o(i.IOMUXC_SetPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IOMUXC_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[127]"></a>IOMUXC_SetPinMux</STRONG> (Thumb, 26 bytes, Stack size 20 bytes, pin_mux.o(i.IOMUXC_SetPinMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IOMUXC_SetPinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[18a]"></a>GPIO_GetPinsInterruptFlags</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr.o(i.GPIO_GetPinsInterruptFlags))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_0_15_IRQHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Combined_16_31_IRQHandler
</UL>

<P><STRONG><a name="[1e4]"></a>PIT_ClearStatusFlags</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, isr.o(i.PIT_ClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
</UL>

<P><STRONG><a name="[1df]"></a>PIT_GetStatusFlags</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, isr.o(i.PIT_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
</UL>

<P><STRONG><a name="[218]"></a>accumulate_q7_to_q15</STRONG> (Thumb, 112 bytes, Stack size 36 bytes, arm_pool_q7_hwc.o(i.accumulate_q7_to_q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = accumulate_q7_to_q15
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_avepool_q7_HWC
</UL>

<P><STRONG><a name="[219]"></a>buffer_scale_back_q15_to_q7</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, arm_pool_q7_hwc.o(i.buffer_scale_back_q15_to_q7))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = buffer_scale_back_q15_to_q7
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_avepool_q7_HWC
</UL>

<P><STRONG><a name="[21d]"></a>compare_and_replace_if_larger_q7</STRONG> (Thumb, 116 bytes, Stack size 28 bytes, arm_pool_q7_hwc.o(i.compare_and_replace_if_larger_q7))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = compare_and_replace_if_larger_q7
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_maxpool_q7_HWC
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
